// <auto-generated />
using System;
using MVC_Project_220319.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MVC_Project_220322.Migrations
{
    [DbContext(typeof(MvcTestDbContext))]
    [Migration("20220327005100_seed")]
    partial class seed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MVC_Project_220319.Models.Firm", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Firms");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Orderdetail", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("DiscountPersent")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("RateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RateId")
                        .IsUnique();

                    b.ToTable("Orderdetails");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<double?>("DiscountPersent")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<int?>("TravelDays")
                        .HasColumnType("int");

                    b.Property<int>("TripType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9474a00b-a7f8-4e4e-9d8d-51b30971324a"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "天龍國",
                            Name = "台北一日遊",
                            OriginalPrice = 999m,
                            ProductStatus = 0,
                            Region = 0,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("c096d10e-7df6-4d3b-a38e-2a93b570b68b"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "貢丸好吃",
                            Name = "新竹半日遊",
                            OriginalPrice = 888m,
                            ProductStatus = 2,
                            Region = 1,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("39bc7b5b-fc3b-4cf9-a220-41bf40ba2619"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "出國玩",
                            Name = "桃園一日遊",
                            OriginalPrice = 9999m,
                            ProductStatus = 1,
                            Region = 1,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("29fa527c-82b2-442e-b8d2-814efc3720e4"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "請你吃慶記",
                            Name = "台中一日遊",
                            OriginalPrice = 6666m,
                            ProductStatus = 1,
                            Region = 2,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("9185d0ff-db0c-404d-8d03-e893c7a8642a"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "住花蓮王家",
                            Name = "花蓮一日遊",
                            OriginalPrice = 7777m,
                            ProductStatus = 1,
                            Region = 5,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("7d2edc71-28ef-48e5-86c7-217999da3de1"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "潛水愛好者的天堂",
                            Name = "綠島3天2夜",
                            OriginalPrice = 11111m,
                            ProductStatus = 1,
                            Region = 6,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("050a111f-4df0-4da1-9579-2b1a1cce0c60"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "來去看花火節",
                            Name = "澎湖5天4夜",
                            OriginalPrice = 15555m,
                            ProductStatus = 1,
                            Region = 6,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("2bb342b9-e417-4e13-b32c-af5460a263d5"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "墾丁大街吃飽飽",
                            Name = "墾丁3天2夜",
                            OriginalPrice = 8888m,
                            ProductStatus = 0,
                            Region = 4,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("e91d0aaf-6e2f-44ed-be31-acc299131d22"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "來吃米粉湯",
                            Name = "宜蘭2天1夜",
                            OriginalPrice = 1122m,
                            ProductStatus = 0,
                            Region = 5,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("69ded3c2-0c2f-4806-b25e-3463e41988d6"),
                            CreateDate = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureTime = new DateTime(2022, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "高雄發大財",
                            Name = "高雄2天1夜",
                            OriginalPrice = 8888m,
                            ProductStatus = 2,
                            Region = 4,
                            TripType = 2,
                            UpdateTime = new DateTime(2022, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("MVC_Project_220319.Models.ProductPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPictures");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Verification")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MVC_Project_220322.Models.CustomerRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CustomerRatings");
                });

            modelBuilder.Entity("MVC_Project_220322.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("PicPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Firm", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.User", "User")
                        .WithOne("Firm")
                        .HasForeignKey("MVC_Project_220319.Models.Firm", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Order", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Orderdetail", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.Order", "Order")
                        .WithMany("Orderdetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_220319.Models.Product", "Product")
                        .WithMany("Orderdetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MVC_Project_220322.Models.CustomerRating", "CustomerRating")
                        .WithOne("Orderdetail")
                        .HasForeignKey("MVC_Project_220319.Models.Orderdetail", "RateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerRating");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.ProductPicture", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.Product", "Product")
                        .WithMany("ProductPictures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.User", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MVC_Project_220322.Models.CustomerRating", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.Product", "Product")
                        .WithMany("CustomerRatings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MVC_Project_220322.Models.Member", b =>
                {
                    b.HasOne("MVC_Project_220319.Models.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("MVC_Project_220322.Models.Member", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Order", b =>
                {
                    b.Navigation("Orderdetails");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Product", b =>
                {
                    b.Navigation("CustomerRatings");

                    b.Navigation("Orderdetails");

                    b.Navigation("ProductPictures");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MVC_Project_220319.Models.User", b =>
                {
                    b.Navigation("Firm");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("MVC_Project_220322.Models.CustomerRating", b =>
                {
                    b.Navigation("Orderdetail");
                });
#pragma warning restore 612, 618
        }
    }
}
